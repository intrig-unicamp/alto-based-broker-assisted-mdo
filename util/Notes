python resource-module-test.py 0.0.0.1 http://172.25.0.10:8889/escape/dov/get-config
python resource-module-test.py 0.0.0.2 http://172.26.0.10:8889/escape/dov/get-config
python resource-module-test.py 0.0.0.3 http://172.27.0.10:8889/escape/dov/get-config

python resource-module-test.py 0.0.0.121 http://172.50.0.10:8889/escape/dov/get-config
python resource-module-test.py 0.0.0.122 http://172.51.0.10:8889/escape/dov/get-config
python resource-module-test.py 0.0.0.123 http://172.52.0.10:8889/escape/dov/get-config

python resource-module-test.py 0.0.0.231 http://172.53.0.10:8889/escape/dov/get-config



Escape folder:
- Dockerfile
- wait-for-it.sh 

class BGPLSRESTAdapter(AbstractRESTAdapter, AbstractESCAPEAdapter,
                       BGPLSbasedTopologyManagerAPI):
  """
  Implement the necessary interface to advertise managed domains and discover
  external domains through BGP-LS using the REST-API of BGP-LS Speaker.
  """
  # Set custom header
  custom_headers = {
    'User-Agent': "ESCAPE/" + __version__,
    # XML-based Virtualizer format
    'Accept': "application/json"
  }
  # Adapter name used in CONFIG and ControllerAdapter class
  name = "BGP-LS-REST"
  # type of the Adapter class - use this name for searching Adapter config
  type = AbstractESCAPEAdapter.TYPE_REMOTE

  def __init__ (self, url, prefix="", **kwargs):
    """
    Init.

    :param url: url of RESTful API
    :type url: str
    :return: None
    """
    AbstractRESTAdapter.__init__(self, base_url=url, prefix=prefix, **kwargs)
    AbstractESCAPEAdapter.__init__(self, **kwargs)
    log.debug("Init %s - type: %s, domain: %s, URL: %s" % (
      self.__class__.__name__, self.type, self.domain_name, url))
    # Converter object
    self.converter = UC3MNFFGConverter(domain=self.domain_name, logger=log)
    self.last_topo = None

  def __cache (self, nffg):
    """
    Cache last received topology.

    :param nffg: received NFFG
    :type nffg: :class:`NFFG`
    :return: None
    """
    self.last_topo = nffg.copy()

  def check_domain_reachable (self):
    """
    Checker function for domain polling. Check the remote domain agent is
    reachable.

    :return: the remote domain is detected or not
    :rtype: bool
    """
    return self.send_quietly(self.GET, 'virtualizer') is not None

  def request_bgp_ls_virtualizer (self):
    """
    Request the external domain description from the BGP-LS client.

    :return: parsed data from JSON
    :rtype: dict
    """
    log.debug("Request topology description from BGP-LS client...")
    data = self.send_no_error(self.GET, 'virtualizer')
    if data:
      try:
        network_topo = json.loads(data, object_hook=unicode_to_str)
      except ValueError:
        log.error("Received data from BGP-LS speaker is not valid JSON!")
        return
      log.log(VERBOSE, "Received topology from BGP-LS speaker:\n%s" %
              pprint.pformat(network_topo))
      return network_topo
    else:
      log.warning("No data has been received from client at %s!" %
                  self._base_url)

  def get_topology_resource (self):
    """
    Return with the topology description as an :class:`NFFG`.

    :return: the emulated topology description
    :rtype: :class:`NFFG`
    """
    topo_data = self.request_bgp_ls_virtualizer()
    log.debug("Process BGP-LS-based JSON...")
    nffg = self.converter.parse_from_json(data=topo_data,
                                          filter_empty_nodes=True)
    if nffg is not None:
      log.debug("Cache received topology...")
      self.__cache(nffg=nffg)
      return nffg
    log.warning("Converted NFFG is missing!")

  def check_topology_changed (self):
    """
    Check the last received topology and return ``False`` if there was no
    changes, ``None`` if domain was unreachable and the converted topology if
    the domain changed.

    :return: the received topology is different from cached one
    :rtype: bool or None or :class:`NFFG`
    """
    raw_data = self.send_quietly(self.GET, 'virtualizer')
    if raw_data is None:
      # Probably lost connection with agent
      log.warning("Requested network topology is missing from domain: %s!" %
                  self.domain_name)
      return
    nffg = self.converter.parse_from_raw(raw_data=raw_data,
                                         filter_empty_nodes=True,
                                         level=VERBOSE)
    if self.last_topo is None:
      log.warning("Missing last received topo description!")
      return
    if not self.__is_changed(new_data=nffg):
      return False
    else:
      log.debug("Domain topology has been changed in domain: %s!" %
                self.domain_name)
      log.log(VERBOSE, "New topology \n%s" % nffg.dump())
      self.__cache(nffg=nffg)
      return nffg

  def __is_changed (self, new_data):
    """
    Return True if the given ``new_data`` is different compared to cached
    ``last_topo``.

    :param new_data: received new data
    :type new_data: :class:`NFFG`
    :return: changed or not
    :rtype: bool
    """
    # If got error before, mark domain as unchanged by default
    if new_data is None:
      log.error("Missing new topology!")
      return False
    # Calculate differences
    # No need to recreate SG hop in this case, no SG is received in
    # Virtualizer format
    add_nffg, del_nffg = NFFGToolBox.generate_difference_of_nffgs(
      old=self.last_topo, new=new_data)
    # If both NFFG are empty --> no difference
    if add_nffg.is_empty() and del_nffg.is_empty():
      return False
    else:
      return True
